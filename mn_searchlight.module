<?php

include('mn_searchlight.features.inc');

/**
 * Implementation of hook_views_api().
 */
function mn_searchlight_views_api() {
  return array(
    'api' => '2',
  );
}

// Implementation of hook_menu_alter
function mn_searchlight_menu_alter($items) {
  if (isset($items['mark/%mark/%/%'])) {
    array_unshift($items['mark/%mark/%/%']['page arguments'], $items['mark/%mark/%/%']['page callback']);
    $items['mark/%mark/%/%']['page callback'] = 'mn_searchlight_mark_vote';
  }

  if (isset($items['data-taxonomy/ajax-save'])) {
    array_unshift($items['data-taxonomy/ajax-save']['page arguments'], $items['data-taxonomy/ajax-save']['page callback']);
    $items['data-taxonomy/ajax-save']['page callback'] = 'mn_searchlight_term_ajax_save';
  }
}

// Implementation of hook_feeds_plugins
function mn_searchlight_feeds_plugins() {
  $path = drupal_get_path('module', 'mn_searchlight') .'/plugins';
  $info = array();
  $info['SearchlightDataProcessor'] = array(
    'name' => 'Searchlight Data processor',
    'description' => 'Create searchable data table records.',
    'help' => 'Create data table records from parsed content.',
    'handler' => array(
      'parent' => 'FeedsDataProcessor',
      'class' => 'SearchlightDataProcessor',
      'file' => 'SearchlightDataProcessor.inc',
      'path' => $path,
    ),
  );
  return $info;
}

// Implementation of hook_feeds_importer_default_alter
function mn_searchlight_feeds_importer_default_alter($items) {
  if (isset($items['syndication'])) {
    $items['syndication']->config['processor']['plugin_key'] = 'SearchlightDataProcessor';
  }
}

// Implementation of hook_views_default_views_alter
function mn_searchlight_views_default_views_alter($items) {
  if (isset($items['mn_news'])) {
    foreach($items['mn_news']->display as $key => $display) {
      // If the display is using the usual search replace it with the searchlight
      // filters.
      if (isset($display->display_options['filters']['keys'])) {
        unset($display->display_options['filters']['keys']);
        $display->display_options['filters']['search'] = array(
          'operator' => '=',
          'value' => '',
          'group' => '0',
          'exposed' => TRUE,
          'expose' => array(
            'operator' => '',
            'identifier' => 'search',
            'label' => '',
            'optional' => 1,
            'single' => 1,
            'remember' => 0,
          ),
          'hideEmpty' => 0,
          'matchMode' => '0',
          'id' => 'search',
          'table' => 'searchlight',
          'field' => 'search',
          'relationship' => 'none',
        );
        $display->display_options['filters']['facets'] = array(
          'id' => 'facets',
          'table' => 'searchlight',
          'field' => 'facets',
        );
        $items['mn_news']->display[$key] = $display;
      }
    }
  }
}

// Implementation of hook_context_default_alter
function mn_searchlight_context_default_contexts_alter($items) {
  if (isset($items['mn-section-search-notrash'])) {
    unset($items['mn-section-search-notrash']->reactions['block']['blocks']['mn_search-status']);
    $items['mn-section-search-notrash']->reactions['block']['blocks']['mn_searchlight-status'] = array(
      'module' => 'mn_searchlight',
      'delta' => 'status',
      'region' => 'right',
      'weight' => 0,
    );
  }

  if (isset($items['mn-section-search'])) {
    unset($items['mn-section-search']->reactions['block']['blocks']['views-mn_search_saved-block_2']);
    unset($items['mn-section-search']->reactions['block']['blocks']['stored_views-save']);
    $items['mn-section-search']->reactions['block']['blocks']['searchlight-facets_mn_searchlight_syndication'] = array(
      'module' => 'searchlight',
      'delta' => 'facets_mn_searchlight_syndication',
      'region' => 'left',
      'weight' => 0,
    );
  }
}

// Implementation of hook_block
function mn_searchlight_block($op = 'list', $delta = null) {
  if ($op == 'list') {
    $blocks = array();
    $blocks['status']['info'] = t('Searchlight index status');
    return $blocks;
  }
  elseif ($op == 'view' && user_access('administer mn')) {
    if ($env = searchlight_environment_load('mn_searchlight_syndication')) {
      $result = db_query("SELECT count(id) AS count, status
        FROM {searchlight_search} WHERE type = '%s'
        GROUP BY status", $env->datasource->base_table);

      $indexed = 0;
      $total = 0;
      while ($row = db_fetch_object($result)) {
        $indexed = $row->status == 1 ? $row->count : $indexed;
        $total = $total + $row->count;
      }
      $remaining = $total - $indexed;

      // Only show the block if there are items to be indexed.
      if ($remaining > 0) {
        $percentage = ((int)min(100, 100 * ($total - $remaining) / max(1, $total))) .'%';
        $label = t('Search index');
        $suffix = t('complete');
        $output = "<label>{$label}</label> <strong>{$percentage}</strong> {$suffix}";
        return array('content' => $output);
      }
    }
  }
}

/**
 * Wrapper around the mark ajax callback which marks content as updated.
 */
function mn_searchlight_mark_vote($callback, $mark, $content_type, $content_id) {
  $output = $callback($mark, $content_type, $content_id);
  $headers = drupal_get_headers();
  if (strpos($headers, '403 Forbidden') !== 0) {
    db_query("UPDATE {searchlight_search} SET status = 0 WHERE type = '%s' AND id = '%s'", $content_type, $content_id);
  }
  return $output;
}

/**
 * Wrapper around data_taxonomy's ajax callback. However this function leaves
 * a bit to be desired;
 *
 * - we cannot detect if the request is sucessful, so we invalidate even for
 *   failed tagging operations.
 * - for the moment the 'type' is hard coded, we should be able to detect this.
 *
 */
function mn_searchlight_term_ajax_save($callback) {
  if (!empty($_POST) && is_numeric($_POST['id'])) {
    db_query("UPDATE {searchlight_search} SET status = 0 WHERE type = '%s' AND id = '%s'", 'feeds_data_syndication', $_POST['id']);
  }
  return $callback();
}

/**
 * Theme business =========================================
 */

// Implementation of hook_theme_registry_alter
function mn_searchlight_theme_registry_alter($items) {
  // We need to move our preprocess to the end of the line so that it's 
  // blown away.
  $pos = array_search('mn_searchlight_preprocess_block', $items['block']['preprocess functions']);
  unset($items['block']['preprocess functions'][$pos]);
  array_push($items['block']['preprocess functions'], 'mn_searchlight_preprocess_block');
}

// Preprocess for blocks.
function mn_searchlight_preprocess_block(&$vars) {
  $bid = "{$vars['block']->module}-{$vars['block']->delta}";
  if ($bid == 'mn_searchlight-status') {
    $vars['attr']['class'] .= " utility-block";
  }
}
